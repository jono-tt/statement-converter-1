class AccountStatement
	attr_accessor :lines

	def initialize(lines)
		@lines = lines
	end

	def branch_name
		@lines[0][5].strip
	end

	def branch_number
		@lines[0][1].strip.split(//).last(4).join
	end

	def account_name
		@lines[1][5].strip
	end

	def account_number
		@lines[1][1].strip
	end

	def file_name
		"#{account_number}_#{account_name}.csv".gsub(/\s/, "-").downcase
	end

	def opening_balance
		opening_balance_row[3].to_f
	end

	def closing_balance
		closing_balance_row[3].to_f
	end

	def transactions
		items = []

		@lines[2..-1].each do |line|
			unless ["OPEN", "CLOSE"].include? line[2].strip
				items << StatementTransaction.new(line, opening_balance_date)
			end
		end

		return items
	end

	def to_csv
		lines = [open_balance_line]
		transactions.each do | transaction |
			lines << transaction.to_row_array
		end

		lines << close_balance_line

		output = []
		lines.each do |line|
			#Using gem 'csv' for converting row's columns into "CSV" line
			output << line.to_csv
		end
		"#,,,,,\n#,,,,,\n" + output.join("")
	end

	private

	def opening_balance_row
		@lines[2]
	end

	def closing_balance_row
		@lines[@lines.length - 1]
	end

	def open_balance_line
		[opening_balance_date.strftime("%Y-%m-%d"), "1000000000", "", "", "", "####### OPENING BALANCE: R #{opening_balance} #######"]
	end
	def close_balance_line
		[closing_balance_date.strftime("%Y-%m-%d"), "1000000000", "", "", "", "####### CLOSING BALANCE: R #{closing_balance} #######"]
	end

	def opening_balance_date
		current_year = Date.today.strftime("%Y").to_i
		open_row = opening_balance_row
		open_date = Date.parse("#{current_year.to_s+open_row[1][5,2]+open_row[1][3,2]}")
		open_date = open_date - 365.days if open_date > closing_balance_date
		open_date
	end

	def closing_balance_date
		current_year = Date.today.strftime("%Y").to_i
		close_row = closing_balance_row

		close_date = Date.parse("#{current_year.to_s+close_row[1][5,2]+close_row[1][3,2]}")
		close_date = close_date - 365.days unless close_date.past?
		close_date
	end

end
